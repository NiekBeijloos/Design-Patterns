<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by Microsoft Visio, SVG Export Template Method.svg Page-1 -->
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ev="http://www.w3.org/2001/xml-events"
		xmlns:v="http://schemas.microsoft.com/visio/2003/SVGExtensions/" width="13.878in" height="18.7165in"
		viewBox="0 0 999.213 1347.59" xml:space="preserve" color-interpolation-filters="sRGB" class="st30">
	<v:documentProperties v:langID="1033" v:metric="true" v:viewMarkup="false">
		<v:userDefs>
			<v:ud v:nameU="msvSubprocessMaster" v:prompt="" v:val="VT4(Rectangle)"/>
			<v:ud v:nameU="msvNoAutoConnect" v:val="VT0(1):26"/>
		</v:userDefs>
	</v:documentProperties>

	<style type="text/css">
	<![CDATA[
		.st1 {fill:#759fcc;stroke:#c7c8c8;stroke-width:0.25}
		.st2 {fill:#feffff;font-family:Calibri;font-size:0.833336em;font-weight:bold}
		.st3 {font-size:1em;font-weight:normal}
		.st4 {fill:#d06d29;stroke:#ae5a21;stroke-width:0.75}
		.st5 {fill:#feffff;font-family:Calibri;font-size:0.833336em}
		.st6 {font-size:1em}
		.st7 {marker-end:url(#mrkr4-16);stroke:#ed7d31;stroke-linecap:round;stroke-linejoin:round;stroke-width:2}
		.st8 {fill:#ed7d31;fill-opacity:1;stroke:#ed7d31;stroke-opacity:1;stroke-width:0.52631578947368}
		.st9 {fill:#ffffff;stroke:none;stroke-linecap:butt}
		.st10 {fill:#d06d29;font-family:Calibri;font-size:0.666664em}
		.st11 {marker-end:url(#mrkr4-24);stroke:#70ad47;stroke-linecap:round;stroke-linejoin:round;stroke-width:2}
		.st12 {fill:#70ad47;fill-opacity:1;stroke:#70ad47;stroke-opacity:1;stroke-width:0.52631578947368}
		.st13 {fill:#61973d;font-family:Calibri;font-size:0.666664em}
		.st14 {fill:url(#grad0-31);stroke:#dfa800;stroke-width:0.75}
		.st15 {fill:#dfa800;font-family:Calibri;font-size:0.833336em}
		.st16 {fill:url(#grad0-64);stroke:#dfa800;stroke-width:0.75}
		.st17 {fill:#dfa800;stroke:#ba8c00;stroke-width:0.75}
		.st18 {marker-end:url(#mrkr4-73);stroke:#fec000;stroke-linecap:round;stroke-linejoin:round;stroke-width:2}
		.st19 {fill:#fec000;fill-opacity:1;stroke:#fec000;stroke-opacity:1;stroke-width:0.52631578947368}
		.st20 {fill:#ffffff;stroke:none;stroke-linecap:butt;stroke-width:7.2}
		.st21 {fill:#dfa800;font-family:Calibri;font-size:0.666664em}
		.st22 {fill:#61973d;stroke:#507e31;stroke-width:0.75}
		.st23 {fill:url(#grad0-83);stroke:#61973d;stroke-width:0.75}
		.st24 {fill:#61973d;font-family:Calibri;font-size:0.833336em}
		.st25 {font-size:1em;font-weight:bold}
		.st26 {fill:url(#grad0-123);stroke:#61973d;stroke-width:0.75}
		.st27 {fill:url(#grad0-137);stroke:#d06d29;stroke-width:0.75}
		.st28 {fill:#d06d29;font-family:Calibri;font-size:0.833336em}
		.st29 {fill:url(#grad0-201);stroke:#d06d29;stroke-width:0.75}
		.st30 {fill:none;fill-rule:evenodd;font-size:12px;overflow:visible;stroke-linecap:square;stroke-miterlimit:3}
	]]>
	</style>

	<defs id="Patterns_And_Gradients">
		<linearGradient id="grad0-31" x1="0" y1="0" x2="1" y2="0" gradientTransform="rotate(60 0.5 0.5)">
			<stop offset="0" stop-color="#fef4e7" stop-opacity="1"/>
			<stop offset="0.24" stop-color="#fef9f3" stop-opacity="1"/>
			<stop offset="0.54" stop-color="#feffff" stop-opacity="1"/>
		</linearGradient>
		<linearGradient id="grad0-64" x1="0" y1="0" x2="1" y2="0" gradientTransform="rotate(60 0.5 0.5)">
			<stop offset="0" stop-color="#ffddb3" stop-opacity="1"/>
			<stop offset="0.24" stop-color="#ffe3bd" stop-opacity="1"/>
			<stop offset="0.54" stop-color="#ca9800" stop-opacity="1"/>
		</linearGradient>
		<linearGradient id="grad0-83" x1="0" y1="0" x2="1" y2="0" gradientTransform="rotate(60 0.5 0.5)">
			<stop offset="0" stop-color="#ebf1e8" stop-opacity="1"/>
			<stop offset="0.24" stop-color="#f5f8f4" stop-opacity="1"/>
			<stop offset="0.54" stop-color="#feffff" stop-opacity="1"/>
		</linearGradient>
		<linearGradient id="grad0-123" x1="0" y1="0" x2="1" y2="0" gradientTransform="rotate(60 0.5 0.5)">
			<stop offset="0" stop-color="#cedcc9" stop-opacity="1"/>
			<stop offset="0.24" stop-color="#d9e3d5" stop-opacity="1"/>
			<stop offset="0.54" stop-color="#578837" stop-opacity="1"/>
		</linearGradient>
		<linearGradient id="grad0-137" x1="0" y1="0" x2="1" y2="0" gradientTransform="rotate(60 0.5 0.5)">
			<stop offset="0" stop-color="#fbece7" stop-opacity="1"/>
			<stop offset="0.24" stop-color="#fdf5f3" stop-opacity="1"/>
			<stop offset="0.54" stop-color="#feffff" stop-opacity="1"/>
		</linearGradient>
		<linearGradient id="grad0-201" x1="0" y1="0" x2="1" y2="0" gradientTransform="rotate(60 0.5 0.5)">
			<stop offset="0" stop-color="#f7c6b9" stop-opacity="1"/>
			<stop offset="0.24" stop-color="#f4d1c8" stop-opacity="1"/>
			<stop offset="0.54" stop-color="#d76213" stop-opacity="1"/>
		</linearGradient>
	</defs>
	<defs id="Markers">
		<g id="lend4">
			<path d="M 2 1 L 0 0 L 2 -1 L 2 1 " style="stroke:none"/>
		</g>
		<marker id="mrkr4-16" class="st8" v:arrowType="4" v:arrowSize="1" v:setback="3.8" refX="-3.8" orient="auto"
				markerUnits="strokeWidth" overflow="visible">
			<use xlink:href="#lend4" transform="scale(-1.9,-1.9) "/>
		</marker>
		<marker id="mrkr4-24" class="st12" v:arrowType="4" v:arrowSize="1" v:setback="3.8" refX="-3.8" orient="auto"
				markerUnits="strokeWidth" overflow="visible">
			<use xlink:href="#lend4" transform="scale(-1.9,-1.9) "/>
		</marker>
		<marker id="mrkr4-73" class="st19" v:arrowType="4" v:arrowSize="1" v:setback="3.8" refX="-3.8" orient="auto"
				markerUnits="strokeWidth" overflow="visible">
			<use xlink:href="#lend4" transform="scale(-1.9,-1.9) "/>
		</marker>
	</defs>
	<g v:mID="0" v:index="1" v:groupContext="foregroundPage">
		<v:userDefs>
			<v:ud v:nameU="msvThemeOrder" v:val="VT0(0):26"/>
		</v:userDefs>
		<title>Page-1</title>
		<v:pageProperties v:drawingScale="0.0393701" v:pageScale="0.0393701" v:drawingUnits="24" v:shadowOffsetX="8.50394"
				v:shadowOffsetY="-8.50394"/>
		<v:layer v:name="Connector" v:index="0"/>
		<g id="shape1-1" v:mID="1" v:groupContext="shape" transform="translate(385.571,-836.447)">
			<title>Rectangle</title>
			<desc>Template Method Let subclasses redefine certain steps of an a...</desc>
			<v:userDefs>
				<v:ud v:nameU="visVersion" v:val="VT0(15):26"/>
			</v:userDefs>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="101.28" cy="1305.07" width="202.56" height="85.0394"/>
			<rect x="0" y="1262.55" width="202.559" height="85.0394" class="st1"/>
			<text x="63.78" y="1290.07" class="st2" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>Template Method<v:newlineChar/><tspan
						x="15.8" dy="1.2em" class="st3">Let subclasses redefine certain steps of an </tspan><tspan x="7.15"
						dy="1.2em" class="st3">algorithm while persevering the sequence and </tspan><tspan x="48.57" dy="1.2em"
						class="st3">structure of the algorithm</tspan></text>		</g>
		<g id="shape119-7" v:mID="119" v:groupContext="shape" transform="translate(189.213,-759.52)">
			<title>Rectangle.119</title>
			<desc>An algorithm must support an open-end of variants and/or chan...</desc>
			<v:userDefs>
				<v:ud v:nameU="visVersion" v:val="VT0(15):26"/>
			</v:userDefs>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="89.6457" cy="1324.26" width="179.3" height="46.6535"/>
			<rect x="0" y="1300.94" width="179.291" height="46.6535" class="st4"/>
			<text x="7.94" y="1321.26" class="st5" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>An algorithm must support an open-end <tspan
						x="13.03" dy="1.2em" class="st6">of variants and/or changes frequently</tspan></text>		</g>
		<g id="shape140-11" v:mID="140" v:groupContext="shape" v:layerMember="0" transform="translate(271.772,-759.52)">
			<title>Dynamic connector.140</title>
			<desc>I.e.</desc>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="7.08661" cy="1362.73" width="40" height="17.6036"/>
			<path d="M7.09 1347.59 L7.09 1370.26" class="st7"/>
			<rect v:rectContext="textBkgnd" x="2.06894" y="1357.93" width="10.0352" height="9.59985" class="st9"/>
			<text x="2.07" y="1365.13" class="st10" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>I.e.</text>		</g>
		<g id="shape207-19" v:mID="207" v:groupContext="shape" v:layerMember="0" transform="translate(754.016,-871.88)">
			<title>Dynamic connector.207</title>
			<desc>I.e.</desc>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="18.8091" cy="1340.5" width="40" height="17.6036"/>
			<path d="M0 1340.5 L30.02 1340.5" class="st11"/>
			<rect v:rectContext="textBkgnd" x="13.7914" y="1335.7" width="10.0352" height="9.59985" class="st9"/>
			<text x="13.79" y="1342.9" class="st13" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>I.e.</text>		</g>
		<g id="group229-27" transform="translate(4.96063,-699.737)" v:mID="229" v:groupContext="group">
			<v:userDefs>
				<v:ud v:nameU="ControlDistFromCorner" v:prompt="" v:val="VT0(0.33406619583616):24"/>
				<v:ud v:nameU="AngToControl" v:prompt="" v:val="VT0(0.78539816339745):32"/>
				<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
				<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
				<v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/>
				<v:ud v:nameU="ControlDistFromCorner" v:prompt="" v:val="VT0(0.24347621942719):1"/>
				<v:ud v:nameU="AngToControl" v:prompt="" v:val="VT0(0.43390756719276):32"/>
				<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.28956345410564):1"/>
				<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.13417183165076):1"/>
			</v:userDefs>
			<title>Folded Corner.196</title>
			<desc>The Template method design pattern might endanger the risk of...</desc>
			<g id="shape229-28" v:mID="229" v:groupContext="groupContent">
				<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197" v:verticalAlign="0"/>
				<v:textRect cx="89.6457" cy="1168.36" width="179.3" height="358.459"/>
				<path d="M0 1347.59 L158.44 1347.59 L179.29 1337.93 L179.29 989.13 L0 989.13 L0 1347.59 Z" class="st14"/>
				<text x="4" y="1002.13" class="st15" v:langID="1033"><v:paragraph/><v:tabList/>The Template method design pattern <tspan
							x="4" dy="1.2em" class="st6">might endanger the risk of violating the </tspan><tspan x="4" dy="1.2em"
							class="st6">Liskov Substitution Principle. </tspan>‘Hook <tspan x="4" dy="1.2em" class="st6">operations</tspan>’, located in the abstract <tspan
							x="4" dy="1.2em" class="st6">template class, could have some default </tspan><tspan x="4" dy="1.2em"
							class="st6">behavior that may be overridden by the </tspan><tspan x="4" dy="1.2em" class="st6">concrete template classes. The behavior </tspan><tspan
							x="4" dy="1.2em" class="st6">that is promised from the base contract </tspan><tspan x="4" dy="1.2em"
							class="st6">could </tspan>be tightened in its preconditions, <tspan x="4" dy="1.2em" class="st6">weakened in its postconditions or </tspan><tspan
							x="4" dy="1.2em" class="st6">invariants might be </tspan>‘overruled’. This could <tspan x="4"
							dy="1.2em" class="st6">result in clients receiving unexpected </tspan><tspan x="4" dy="1.2em"
							class="st6">behavior that might result in a failure </tspan><tspan x="4" dy="1.2em" class="st6">later. Another aspect is that clients might </tspan><tspan
							x="4" dy="1.2em" class="st6">require anticipation to  handle that </tspan><tspan x="4" dy="1.2em"
							class="st6">behavior. This in turn might cause the </tspan><tspan x="4" dy="1.2em" class="st6">cyclomatic complexity of the code to </tspan><tspan
							x="4" dy="1.2em" class="st6">‘</tspan>grow’ or additional maintenance cost for <tspan x="4" dy="1.2em"
							class="st6">resolving a bug later. An example, </tspan><tspan x="4" dy="1.2em" class="st6">replacing the base class implementation </tspan><tspan
							x="4" dy="1.2em" class="st6">with an empty function. This violates the </tspan><tspan x="4" dy="1.2em"
							class="st6">‘</tspan>invariant - rule’, a condition that can be <tspan x="4" dy="1.2em" class="st6">stated true in the entire execution of a </tspan><tspan
							x="4" dy="1.2em" class="st6">program. Clients may count on this </tspan><tspan x="4" dy="1.2em"
							class="st6">invariant, but suddenly the contract of </tspan><tspan x="4" dy="1.2em" class="st6">the base </tspan>class is violated. This means the <tspan
							x="4" dy="1.2em" class="st6">client can encounter unanticipated / </tspan><tspan x="4" dy="1.2em"
							class="st6">unexpected results from the subclass </tspan><tspan x="4" dy="1.2em" class="st6">implementation, that could be fatal. </tspan> </text>			</g>
			<g id="shape230-61" v:mID="230" v:groupContext="shape" transform="translate(158.443,2.27374E-13)">
				<title>Sheet.230</title>
				<v:userDefs>
					<v:ud v:nameU="ControlX" v:prompt="" v:val="VT0(0.94488188976378):24"/>
					<v:ud v:nameU="ControlY" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="FillForegnd" v:prompt="" v:val="VT0(1):26"/>
					<v:ud v:nameU="ControlX" v:prompt="" v:val="VT0(2.3877952167477):1"/>
					<v:ud v:nameU="ControlY" v:prompt="" v:val="VT0(0.22091324496806):1"/>
					<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.28956345410564):1"/>
					<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.13417183165076):1"/>
					<v:ud v:nameU="FillForegnd" v:prompt="" v:val="VT5(#fec000)"/>
				</v:userDefs>
				<path d="M0 1347.59 L20.85 1337.93 L13.48 1331.68 L0 1347.59 Z" class="st16"/>
			</g>
		</g>
		<g id="shape232-65" v:mID="232" v:groupContext="shape" transform="translate(218.268,-861.959)">
			<title>Rectangle.232</title>
			<desc>Liskov Substituation</desc>
			<v:userDefs>
				<v:ud v:nameU="visVersion" v:val="VT0(15):26"/>
			</v:userDefs>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="60.9449" cy="1330.58" width="121.89" height="34.0158"/>
			<rect x="0" y="1313.57" width="121.89" height="34.0158" class="st17"/>
			<text x="20.33" y="1333.58" class="st5" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>Liskov Substituation</text>		</g>
		<g id="shape234-68" v:mID="234" v:groupContext="shape" v:layerMember="0" transform="translate(218.268,-871.88)">
			<title>Dynamic connector.234</title>
			<desc>I.e.</desc>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="-11.5653" cy="1340.5" width="40" height="17.6036"/>
			<path d="M0 1340.5 L-26.42 1340.5" class="st18"/>
			<rect v:rectContext="textBkgnd" x="-16.583" y="1335.7" width="10.0352" height="9.59985" class="st20"/>
			<text x="-16.58" y="1342.9" class="st21" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>I.e.</text>		</g>
		<g id="shape243-76" v:mID="243" v:groupContext="shape" transform="translate(632.126,-861.959)">
			<title>Rectangle.243</title>
			<desc>Open Closed</desc>
			<v:userDefs>
				<v:ud v:nameU="visVersion" v:val="VT0(15):26"/>
			</v:userDefs>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="60.9449" cy="1330.58" width="121.89" height="34.0158"/>
			<rect x="0" y="1313.57" width="121.89" height="34.0158" class="st22"/>
			<text x="35.24" y="1333.58" class="st5" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>Open Closed</text>		</g>
		<g id="group276-79" transform="translate(791.634,-682.983)" v:mID="276" v:groupContext="group">
			<v:userDefs>
				<v:ud v:nameU="ControlDistFromCorner" v:prompt="" v:val="VT0(0.33406619583616):24"/>
				<v:ud v:nameU="AngToControl" v:prompt="" v:val="VT0(0.78539816339745):32"/>
				<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
				<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
				<v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/>
				<v:ud v:nameU="ControlDistFromCorner" v:prompt="" v:val="VT0(0.22590738425801):1"/>
				<v:ud v:nameU="AngToControl" v:prompt="" v:val="VT0(0.80186934505746):32"/>
				<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.15717325126758):1"/>
				<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.16243810408875):1"/>
			</v:userDefs>
			<title>Folded Corner.276</title>
			<desc>The Template Method Pattern compliments the Open Closed Princ...</desc>
			<g id="shape276-80" v:mID="276" v:groupContext="groupContent">
				<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197" v:verticalAlign="0"/>
				<v:textRect cx="101.28" cy="1151.61" width="202.56" height="391.968"/>
				<path d="M0 1347.59 L191.24 1347.59 L202.56 1335.89 L202.56 955.62 L0 955.62 L0 1347.59 Z" class="st23"/>
				<text x="4" y="968.62" class="st24" v:langID="1033"><v:paragraph v:bulletSize="0.166667"/><v:tabList/>The Template Method Pattern compliments the <tspan
							x="4" dy="1.2em" class="st6">Open Closed Principle by allowing clients to </tspan><tspan x="4"
							dy="1.2em" class="st6">subclass an algorithm and redefine its details. </tspan><tspan x="4" dy="1.2em"
							class="st6">This enables </tspan><tspan class="st25">stability </tspan>and <tspan class="st25">reusability</tspan>. All <tspan
							x="4" dy="1.2em" class="st6">aspects are compared against an </tspan><tspan x="4" dy="1.2em"
							class="st6">implementation where the algorithm(s) are </tspan><tspan x="4" dy="1.2em" class="st6">situated in their own class resulting in change </tspan><tspan
							x="4" dy="1.2em" class="st6">and/or duplication. </tspan><tspan class="st25">Stability</tspan>, because the <tspan
							x="4" dy="1.2em" class="st6">Template method can be redefined in its details </tspan><tspan x="4"
							dy="1.2em" class="st6">without direct modification. This allows </tspan><tspan x="4" dy="1.2em"
							class="st6">extending the code base with different variants </tspan><tspan x="4" dy="1.2em" class="st6">of an algorithm, while ensuring stability of the </tspan><tspan
							x="4" dy="1.2em" class="st6">production and test code. Existing, working </tspan><tspan x="4"
							dy="1.2em" class="st6">algorithmic code remains untouched and </tspan><tspan x="4" dy="1.2em"
							class="st6">cannot be </tspan>‘broken’ accidently. Test code does <tspan x="4" dy="1.2em" class="st6">not need to change, because production code </tspan><tspan
							x="4" dy="1.2em" class="st6">remains </tspan>‘untouched’. <tspan class="st25">Reusability</tspan>, because the <tspan
							x="4" dy="1.2em" class="st6">logic in the base template function is shared </tspan><tspan x="4"
							dy="1.2em" class="st6">across multiple concrete variants of the </tspan><tspan x="4" dy="1.2em"
							class="st6">algorithm. Inheritance accomplishes this </tspan><tspan x="4" dy="1.2em" class="st6">reusability aspect. In contrast, having separate </tspan><tspan
							x="4" dy="1.2em" class="st6">algorithm invariants without a common base </tspan><tspan x="4" dy="1.2em"
							class="st6">class, would mean that the structure and </tspan><tspan x="4" dy="1.2em" class="st6">common logic is duplicated across the code </tspan><tspan
							x="4" dy="1.2em" class="st6">base. This results in additional maintenance </tspan><tspan x="4"
							dy="1.2em" class="st6">when the algorithm base (logic or structure) </tspan><tspan x="4" dy="1.2em"
							class="st6">requires change. The constraining factor that </tspan><tspan x="4" dy="1.2em" class="st6">the Template Method provides, in the </tspan><tspan
							x="4" dy="1.2em" class="st6">execution sequence, enhances design intent </tspan><tspan x="4" dy="1.2em"
							class="st6">and overcomes clients possibly introducing new </tspan><tspan x="4" dy="1.2em" class="st6">structures that could potentially introduce </tspan><tspan
							x="4" dy="1.2em" class="st6">undefined situations. </tspan> </text>			</g>
			<g id="shape277-120" v:mID="277" v:groupContext="shape" transform="translate(190.87,2.27374E-13)">
				<title>Sheet.277</title>
				<v:userDefs>
					<v:ud v:nameU="ControlX" v:prompt="" v:val="VT0(0.94488188976378):24"/>
					<v:ud v:nameU="ControlY" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="FillForegnd" v:prompt="" v:val="VT0(1):26"/>
					<v:ud v:nameU="ControlX" v:prompt="" v:val="VT0(2.6509700497249):1"/>
					<v:ud v:nameU="ControlY" v:prompt="" v:val="VT0(0.15708797682843):1"/>
					<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.15717325126758):1"/>
					<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.16243810408875):1"/>
					<v:ud v:nameU="FillForegnd" v:prompt="" v:val="VT5(#70ad47)"/>
				</v:userDefs>
				<path d="M0.37 1347.59 L11.69 1335.89 L0 1336.28 L0.37 1347.59 Z" class="st26"/>
			</g>
		</g>
		<g id="shape281-124" v:mID="281" v:groupContext="shape" transform="translate(385.571,-759.52)">
			<title>Rectangle.281</title>
			<desc>Classes, having almost identical algorithm logic, only differ...</desc>
			<v:userDefs>
				<v:ud v:nameU="visVersion" v:val="VT0(15):26"/>
			</v:userDefs>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="101.28" cy="1324.26" width="202.56" height="46.6535"/>
			<rect x="0" y="1300.94" width="202.559" height="46.6535" class="st4"/>
			<text x="4.87" y="1321.26" class="st5" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>Classes, having almost identical algorithm logic, <tspan
						x="39.96" dy="1.2em" class="st6">only differ in their fine details.</tspan></text>		</g>
		<g id="shape282-128" v:mID="282" v:groupContext="shape" v:layerMember="0" transform="translate(479.764,-836.447)">
			<title>Dynamic connector.282</title>
			<path d="M7.09 1347.59 L7.09 1366.17 L7.09 1370.26" class="st7"/>
		</g>
		<g id="group285-133" transform="translate(385.571,-3.9685)" v:mID="285" v:groupContext="group">
			<v:userDefs>
				<v:ud v:nameU="ControlDistFromCorner" v:prompt="" v:val="VT0(0.33406619583616):24"/>
				<v:ud v:nameU="AngToControl" v:prompt="" v:val="VT0(0.78539816339745):32"/>
				<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
				<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
				<v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/>
				<v:ud v:nameU="ControlDistFromCorner" v:prompt="" v:val="VT0(0.25974958319976):1"/>
				<v:ud v:nameU="AngToControl" v:prompt="" v:val="VT0(0.70158934827199):32"/>
				<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.20122134676555):1"/>
				<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.1700338360674):1"/>
			</v:userDefs>
			<title>Folded Corner.285</title>
			<desc>The Template Method pattern ensures code reusability and over...</desc>
			<g id="shape285-134" v:mID="285" v:groupContext="groupContent">
				<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197" v:verticalAlign="0"/>
				<v:textRect cx="101.28" cy="984.952" width="202.56" height="725.277"/>
				<path d="M0 1347.59 L188.07 1347.59 L202.56 1335.35 L202.56 622.31 L0 622.31 L0 1347.59 Z" class="st27"/>
				<text x="4" y="635.31" class="st28" v:langID="1033"><v:paragraph/><v:tabList/>The Template Method pattern ensures code <tspan
							x="4" dy="1.2em" class="st6">reusability and overcomes code duplication. </tspan><tspan x="4"
							dy="1.2em" class="st6">Different variants of an algorithm, defined on </tspan><tspan x="4" dy="1.2em"
							class="st6">multiple places of our code base, </tspan>might contain <tspan x="4" dy="1.2em" class="st6">common logic and structure. In case the </tspan><tspan
							x="4" dy="1.2em" class="st6">algorithm changes in that common part it </tspan><tspan x="4" dy="1.2em"
							class="st6">requires modification on multiple places. The </tspan><tspan x="4" dy="1.2em" class="st6">Template method extracts this common </tspan><tspan
							x="4" dy="1.2em" class="st6">algorithm logic into a base class, defines the </tspan><tspan x="4"
							dy="1.2em" class="st6">skeleton and let</tspan>’s subclasses implement the <tspan x="4" dy="1.2em"
							class="st6">varying parts. This reduces the overall </tspan><tspan x="4" dy="1.2em" class="st6">maintenance cost. The Template pattern differs </tspan><tspan
							x="4" dy="1.2em" class="st6">from the Strategy pattern in a sense that the </tspan><tspan x="4"
							dy="1.2em" class="st6">Template Method uses inheritance and the </tspan><tspan x="4" dy="1.2em"
							class="st6">Strategy pattern uses composition. The </tspan><tspan x="4" dy="1.2em" class="st6">Strategy pattern is preferred in case the </tspan><tspan
							x="4" dy="1.2em" class="st6">strategies/algorithms are </tspan>‘self-contained’ (e.g. <tspan x="4"
							dy="1.2em" class="st6">more then just the difference in a </tspan>‘simple’ <tspan x="4" dy="1.2em"
							class="st6">return) and must be shared amongst possible </tspan><tspan x="4" dy="1.2em" class="st6">other clients/Contexts. The Template pattern is </tspan><tspan
							x="4" dy="1.2em" class="st6">preferred in case the algorithms </tspan>diverge in their <tspan x="4"
							dy="1.2em" class="st6">fine  details and/or access of the internal </tspan><tspan x="4" dy="1.2em"
							class="st6">details of the concrete implementation is </tspan><tspan x="4" dy="1.2em" class="st6">required by the base class. This means </tspan>from <tspan
							x="4" dy="1.2em" class="st6">client reusability point of view, the Strategy is </tspan><tspan x="4"
							dy="1.2em" class="st6">preferred over the Template method pattern. </tspan><tspan x="4" dy="1.2em"
							class="st6">Each Strategy can be reused within a different </tspan><tspan x="4" dy="1.2em" class="st6">Context (=client). This means a new Context </tspan><tspan
							x="4" dy="1.2em" class="st6">solely depends on the interface of the Strategy </tspan><tspan x="4"
							dy="1.2em" class="st6">and not on the extensive interface of the full </tspan><tspan x="4" dy="1.2em"
							class="st6">Context. This compliments the </tspan>Interface <tspan x="4" dy="1.2em" class="st6">Segregation principle. In contrast, within the </tspan><tspan
							x="4" dy="1.2em" class="st6">Template method the base and concrete </tspan><tspan x="4" dy="1.2em"
							class="st6">implementation are </tspan>‘glued’ together. This <tspan x="4" dy="1.2em" class="st6">means clients whom would like to re</tspan>-use the <tspan
							x="4" dy="1.2em" class="st6">concrete template</tspan>-method implementation are <tspan x="4"
							dy="1.2em" class="st6">‘</tspan>automatically’ bounded to the base class <tspan x="4" dy="1.2em"
							class="st6">implementation as well. Even if they don</tspan>’t want <tspan x="4" dy="1.2em" class="st6">that! This could violate Interface Segregation. </tspan><tspan
							x="4" dy="1.2em" class="st6">Adhering to Interface Segregation enables in </tspan><tspan x="4"
							dy="1.2em" class="st6">this case: less recompilation, more confident of </tspan><tspan x="4" dy="1.2em"
							class="st6">changing an interface (less search hits) and the </tspan><tspan x="4" dy="1.2em"
							class="st6">client is constraint </tspan>(‘role’ interface). <tspan x="4" dy="1.2em" class="st6">Additionally, in case the base algorithm </tspan><tspan
							x="4" dy="1.2em" class="st6">(=Context or Base Template) requires access to </tspan><tspan x="4"
							dy="1.2em" class="st6">the internals of the concrete algorithm </tspan><tspan x="4" dy="1.2em"
							class="st6">(=Strategies or Concrete Template) then the </tspan><tspan x="4" dy="1.2em" class="st6">Template might be preferred. In the Template </tspan><tspan
							x="4" dy="1.2em" class="st6">Method pattern, the base class can get access </tspan><tspan x="4"
							dy="1.2em" class="st6">to the concrete implementation via </tspan>“the <tspan x="4" dy="1.2em"
							class="st6">Hollywood principle</tspan>”. This can be done via a <tspan x="4" dy="1.2em" class="st6">relative encapsulated approach, by making the </tspan><tspan
							x="4" dy="1.2em" class="st6">members protected. In contrast, the Strategy </tspan><tspan x="4"
							dy="1.2em" class="st6">pattern does not provide this encapsulated </tspan><tspan x="4" dy="1.2em"
							class="st6">approach (in this particular use</tspan>-case). Each <tspan x="4" dy="1.2em" class="st6">Strategy would need to expose its internals on </tspan><tspan
							x="4" dy="1.2em" class="st6">its interface, making it available to all clients. </tspan><tspan x="4"
							dy="1.2em" class="st6">This might violate encapsulation, resulting in </tspan><tspan x="4" dy="1.2em"
							class="st6">possible unwanted coupling </tspan>that is provoked by <tspan x="4" dy="1.2em" class="st6">the design.</tspan></text>			</g>
			<g id="shape286-198" v:mID="286" v:groupContext="shape" transform="translate(188.071,2.27374E-13)">
				<title>Sheet.286</title>
				<v:userDefs>
					<v:ud v:nameU="ControlX" v:prompt="" v:val="VT0(0.94488188976378):24"/>
					<v:ud v:nameU="ControlY" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="FillForegnd" v:prompt="" v:val="VT0(1):26"/>
					<v:ud v:nameU="ControlX" v:prompt="" v:val="VT0(2.6456692069039):1"/>
					<v:ud v:nameU="ControlY" v:prompt="" v:val="VT0(0.19840123452165):1"/>
					<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.20122134676555):1"/>
					<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.1700338360674):1"/>
					<v:ud v:nameU="FillForegnd" v:prompt="" v:val="VT5(#ed7d31)"/>
				</v:userDefs>
				<path d="M0 1347.59 L14.49 1335.35 L2.42 1333.31 L0 1347.59 Z" class="st29"/>
			</g>
		</g>
		<g id="shape289-202" v:mID="289" v:groupContext="shape" v:layerMember="0" transform="translate(479.764,-759.52)">
			<title>Dynamic connector.289</title>
			<desc>I.e.</desc>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="7.08661" cy="1362.73" width="40" height="17.6036"/>
			<path d="M7.09 1347.59 L7.09 1370.26" class="st7"/>
			<rect v:rectContext="textBkgnd" x="2.06894" y="1357.93" width="10.0352" height="9.59985" class="st9"/>
			<text x="2.07" y="1365.13" class="st10" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>I.e.</text>		</g>
		<g id="shape244-209" v:mID="244" v:groupContext="shape" v:layerMember="0" transform="translate(588.13,-871.88)">
			<title>Dynamic connector.244</title>
			<desc>Why?</desc>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="15.944" cy="1339.6" width="40" height="17.6036"/>
			<path d="M0 1340.5 L36.4 1340.5" class="st11"/>
			<rect v:rectContext="textBkgnd" x="6.61966" y="1334.8" width="18.6485" height="9.59985" class="st20"/>
			<text x="6.62" y="1342" class="st13" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>Why?</text>		</g>
		<g id="shape292-216" v:mID="292" v:groupContext="shape" transform="translate(600.236,-759.52)">
			<title>Rectangle.292</title>
			<desc>Constrain subclasses to only extend the fine granular details...</desc>
			<v:userDefs>
				<v:ud v:nameU="visVersion" v:val="VT0(15):26"/>
			</v:userDefs>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="89.6457" cy="1324.26" width="179.3" height="46.6535"/>
			<rect x="0" y="1300.94" width="179.291" height="46.6535" class="st4"/>
			<text x="9.45" y="1315.26" class="st5" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>Constrain subclasses to only extend the <tspan
						x="8.06" dy="1.2em" class="st6">fine granular details of an algorithm and </tspan><tspan x="40.64"
						dy="1.2em" class="st6">not the entire algorithm</tspan></text>		</g>
		<g id="shape293-221" v:mID="293" v:groupContext="shape" v:layerMember="0" transform="translate(486.85,-836.447)">
			<title>Dynamic connector.293</title>
			<path d="M0 1347.59 L0 1364.18 L203.03 1364.18 L203.03 1370.26" class="st7"/>
		</g>
		<g id="shape48-226" v:mID="48" v:groupContext="shape" v:layerMember="0" transform="translate(486.85,-836.447)">
			<title>Dynamic connector</title>
			<desc>When?</desc>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="1.57481" cy="1357.72" width="40" height="17.6036"/>
			<path d="M0 1347.59 L0 1364.4 L-207.99 1364.4 L-207.99 1370.26" class="st7"/>
			<rect v:rectContext="textBkgnd" x="-10.0305" y="1352.92" width="23.2108" height="9.59985" class="st9"/>
			<text x="-10.03" y="1360.12" class="st10" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>When?</text>		</g>
		<g id="group294-233" transform="translate(600.236,-354.253)" v:mID="294" v:groupContext="group">
			<v:userDefs>
				<v:ud v:nameU="ControlDistFromCorner" v:prompt="" v:val="VT0(0.33406619583616):24"/>
				<v:ud v:nameU="AngToControl" v:prompt="" v:val="VT0(0.78539816339745):32"/>
				<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
				<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
				<v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/>
				<v:ud v:nameU="ControlDistFromCorner" v:prompt="" v:val="VT0(0.18588027764442):1"/>
				<v:ud v:nameU="AngToControl" v:prompt="" v:val="VT0(0.68710981453558):32"/>
				<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.14652267929148):1"/>
				<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.12022020755726):1"/>
			</v:userDefs>
			<title>Folded Corner.294</title>
			<desc>The Template Method pattern ensures that the structure of an ...</desc>
			<g id="shape294-234" v:mID="294" v:groupContext="groupContent">
				<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197" v:verticalAlign="0"/>
				<v:textRect cx="89.6457" cy="1160.09" width="179.3" height="374.993"/>
				<path d="M0 1347.59 L168.74 1347.59 L179.29 1338.93 L179.29 972.6 L0 972.6 L0 1347.59 Z" class="st27"/>
				<text x="4" y="985.6" class="st28" v:langID="1033"><v:paragraph/><v:tabList/>The Template Method pattern ensures <tspan
							x="4" dy="1.2em" class="st6">that the structure of an algorithm </tspan><tspan x="4" dy="1.2em"
							class="st6">remains in tact. Subclasses can only </tspan><tspan x="4" dy="1.2em" class="st6">change the details, but cannot change the </tspan><tspan
							x="4" dy="1.2em" class="st6">execution sequence nor certain </tspan><tspan x="4" dy="1.2em" class="st6">fundamental parts of the algorithm. This </tspan><tspan
							x="4" dy="1.2em" class="st6">compliments a safety aspect. The </tspan><tspan x="4" dy="1.2em"
							class="st6">sequence of an algorithm is defined once </tspan><tspan x="4" dy="1.2em" class="st6">and is identical for all variants of that </tspan><tspan
							x="4" dy="1.2em" class="st6">algorithm. This means subclasses cannot </tspan><tspan x="4" dy="1.2em"
							class="st6">unintentionally re</tspan>-order certain execution <tspan x="4" dy="1.2em" class="st6">steps, that potentially could cause </tspan><tspan
							x="4" dy="1.2em" class="st6">undefined behavior. Constraining </tspan><tspan x="4" dy="1.2em"
							class="st6">introduces stability. The design is </tspan><tspan x="4" dy="1.2em" class="st6">intentional and clients are promised a </tspan><tspan
							x="4" dy="1.2em" class="st6">given base class </tspan>contract. The sharing of <tspan x="4" dy="1.2em"
							class="st6">this structure amongst the sub</tspan>-classes <tspan x="4" dy="1.2em" class="st6">adds</tspan>-up to the reusability aspect of the <tspan
							x="4" dy="1.2em" class="st6">pattern.</tspan></text>			</g>
			<g id="shape295-256" v:mID="295" v:groupContext="shape" transform="translate(168.742,2.27374E-13)">
				<title>Sheet.295</title>
				<v:userDefs>
					<v:ud v:nameU="ControlX" v:prompt="" v:val="VT0(0.94488188976378):24"/>
					<v:ud v:nameU="ControlY" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="FillForegnd" v:prompt="" v:val="VT0(1):26"/>
					<v:ud v:nameU="ControlX" v:prompt="" v:val="VT0(2.3722524771059):1"/>
					<v:ud v:nameU="ControlY" v:prompt="" v:val="VT0(0.14370079007187):1"/>
					<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.14652267929148):1"/>
					<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.12022020755726):1"/>
					<v:ud v:nameU="FillForegnd" v:prompt="" v:val="VT5(#ed7d31)"/>
				</v:userDefs>
				<path d="M0 1347.59 L10.55 1338.93 L2.06 1337.24 L0 1347.59 Z" class="st29"/>
			</g>
		</g>
		<g id="shape296-259" v:mID="296" v:groupContext="shape" v:layerMember="0" transform="translate(682.795,-759.52)">
			<title>Dynamic connector.296</title>
			<desc>I.e.</desc>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="7.08661" cy="1362.73" width="40" height="17.6036"/>
			<path d="M7.09 1347.59 L7.09 1370.26" class="st7"/>
			<rect v:rectContext="textBkgnd" x="2.06894" y="1357.93" width="10.0352" height="9.59985" class="st9"/>
			<text x="2.07" y="1365.13" class="st10" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>I.e.</text>		</g>
		<g id="group235-266" transform="translate(189.213,-354.253)" v:mID="235" v:groupContext="group">
			<v:userDefs>
				<v:ud v:nameU="ControlDistFromCorner" v:prompt="" v:val="VT0(0.33406619583616):24"/>
				<v:ud v:nameU="AngToControl" v:prompt="" v:val="VT0(0.78539816339745):32"/>
				<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
				<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
				<v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/>
				<v:ud v:nameU="ControlDistFromCorner" v:prompt="" v:val="VT0(0.18588027764442):1"/>
				<v:ud v:nameU="AngToControl" v:prompt="" v:val="VT0(0.68710981453558):32"/>
				<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.14652267929148):1"/>
				<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.12022020755726):1"/>
			</v:userDefs>
			<title>Folded Corner.235</title>
			<desc>The Template Method pattern supports changing the fine, granu...</desc>
			<g id="shape235-267" v:mID="235" v:groupContext="groupContent">
				<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197" v:verticalAlign="0"/>
				<v:textRect cx="89.6457" cy="1160.09" width="179.3" height="374.993"/>
				<path d="M0 1347.59 L168.74 1347.59 L179.29 1338.93 L179.29 972.6 L0 972.6 L0 1347.59 Z" class="st27"/>
				<text x="4" y="985.6" class="st28" v:langID="1033"><v:paragraph/><v:tabList/>The Template Method pattern supports <tspan
							x="4" dy="1.2em" class="st6">changing the fine, granular details of an </tspan><tspan x="4" dy="1.2em"
							class="st6">Algorithm without direct modification. In </tspan><tspan x="4" dy="1.2em" class="st6">case an algorithm changes frequently in </tspan><tspan
							x="4" dy="1.2em" class="st6">its details and/or different variants of an </tspan><tspan x="4"
							dy="1.2em" class="st6">algorithm must be supported, then it </tspan><tspan x="4" dy="1.2em" class="st6">might enhance code stability to allow </tspan><tspan
							x="4" dy="1.2em" class="st6">subclasses to define this logic. The </tspan><tspan x="4" dy="1.2em"
							class="st6">Template pattern defines a template </tspan><tspan x="4" dy="1.2em" class="st6">method containing </tspan>‘Hook’, concrete and <tspan
							x="4" dy="1.2em" class="st6">primitive operations. </tspan>‘Hook’ operations <tspan x="4" dy="1.2em"
							class="st6">often define some default behavior in the </tspan><tspan x="4" dy="1.2em" class="st6">base class and may be overridden by the </tspan><tspan
							x="4" dy="1.2em" class="st6">respective subclasses. Concrete </tspan>base <tspan x="4" dy="1.2em"
							class="st6">operations cannot be overridden by the </tspan><tspan x="4" dy="1.2em" class="st6">subclasses and belong to the invariant </tspan><tspan
							x="4" dy="1.2em" class="st6">part of the base class and algorithm. </tspan><tspan x="4" dy="1.2em"
							class="st6">Primitive operations, should be </tspan><tspan x="4" dy="1.2em" class="st6">minimized, otherwise it might be </tspan>‘work-<tspan
							x="4" dy="1.2em" class="st6">intensive</tspan>’ for subclasses to use a certain <tspan x="4" dy="1.2em"
							class="st6">algorithm. This often happens in case an </tspan><tspan x="4" dy="1.2em" class="st6">algorithm is made too generic, and </tspan><tspan
							x="4" dy="1.2em" class="st6">subclasses define most of it. A solution </tspan><tspan x="4" dy="1.2em"
							class="st6">can be to split it in two different </tspan><tspan x="4" dy="1.2em" class="st6">algorithms instead of forcing the variants </tspan><tspan
							x="4" dy="1.2em" class="st6">of the algorithm to fit under a single base. </tspan><tspan x="4"
							dy="1.2em" class="st6">Primitive operations are pure, abstract </tspan><tspan x="4" dy="1.2em"
							class="st6">operations that must be implemented by </tspan><tspan x="4" dy="1.2em" class="st6">the subclasses </tspan> </text>			</g>
			<g id="shape236-299" v:mID="236" v:groupContext="shape" transform="translate(168.742,2.27374E-13)">
				<title>Sheet.236</title>
				<v:userDefs>
					<v:ud v:nameU="ControlX" v:prompt="" v:val="VT0(0.94488188976378):24"/>
					<v:ud v:nameU="ControlY" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="FillForegnd" v:prompt="" v:val="VT0(1):26"/>
					<v:ud v:nameU="ControlX" v:prompt="" v:val="VT0(2.3722524771059):1"/>
					<v:ud v:nameU="ControlY" v:prompt="" v:val="VT0(0.14370079007187):1"/>
					<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.14652267929148):1"/>
					<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.12022020755726):1"/>
					<v:ud v:nameU="FillForegnd" v:prompt="" v:val="VT5(#ed7d31)"/>
				</v:userDefs>
				<path d="M0 1347.59 L10.55 1338.93 L2.06 1337.24 L0 1347.59 Z" class="st29"/>
			</g>
		</g>
		<g id="shape300-302" v:mID="300" v:groupContext="shape" transform="translate(218.268,-1181.44)">
			<title>Rectangle.300</title>
			<desc>Negative side of Open Closed</desc>
			<v:userDefs>
				<v:ud v:nameU="visVersion" v:val="VT0(15):26"/>
			</v:userDefs>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="60.9449" cy="1330.58" width="121.89" height="34.0158"/>
			<rect x="0" y="1313.57" width="121.89" height="34.0158" class="st17"/>
			<text x="16.09" y="1327.58" class="st5" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>Negative side of Open <tspan
						x="47.42" dy="1.2em" class="st6">Closed</tspan></text>		</g>
		<g id="shape301-306" v:mID="301" v:groupContext="shape" v:layerMember="0" transform="translate(385.571,-878.967)">
			<title>Dynamic connector.301</title>
			<path d="M0 1347.59 L-13.68 1347.59 L-13.68 1028.11 L-37.81 1028.11" class="st18"/>
		</g>
		<g id="shape24-311" v:mID="24" v:groupContext="shape" v:layerMember="0" transform="translate(385.571,-871.88)">
			<title>Dynamic connector.24</title>
			<desc>Why not?</desc>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="-19.3896" cy="1339.42" width="41.38" height="17.6036"/>
			<path d="M0 1340.5 L-37.81 1340.5" class="st18"/>
			<rect v:rectContext="textBkgnd" x="-35.1688" y="1334.62" width="31.5585" height="9.59985" class="st20"/>
			<text x="-35.17" y="1341.82" class="st21" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>Why not?</text>		</g>
		<g id="group302-318" transform="translate(4.96063,-1062.92)" v:mID="302" v:groupContext="group">
			<v:userDefs>
				<v:ud v:nameU="ControlDistFromCorner" v:prompt="" v:val="VT0(0.33406619583616):24"/>
				<v:ud v:nameU="AngToControl" v:prompt="" v:val="VT0(0.78539816339745):32"/>
				<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
				<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
				<v:ud v:nameU="visVersion" v:prompt="" v:val="VT0(15):26"/>
				<v:ud v:nameU="ControlDistFromCorner" v:prompt="" v:val="VT0(0.19592208183828):1"/>
				<v:ud v:nameU="AngToControl" v:prompt="" v:val="VT0(0.54973760797934):32"/>
				<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.18749833825511):1"/>
				<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.11488852803029):1"/>
			</v:userDefs>
			<title>Folded Corner.302</title>
			<desc>The Template method pattern both entails the negative and pos...</desc>
			<g id="shape302-319" v:mID="302" v:groupContext="groupContent">
				<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197" v:verticalAlign="0"/>
				<v:textRect cx="89.6457" cy="1212.06" width="179.3" height="271.067"/>
				<path d="M0 1347.59 L165.79 1347.59 L179.29 1339.32 L179.29 1076.52 L0 1076.52 L0 1347.59 Z" class="st14"/>
				<text x="4" y="1089.52" class="st15" v:langID="1033"><v:paragraph/><v:tabList/>The Template method pattern both <tspan
							x="4" dy="1.2em" class="st6">entails the negative and positive side of </tspan><tspan x="4" dy="1.2em"
							class="st6">the Open Closed principle (=OCP). The </tspan><tspan x="4" dy="1.2em" class="st6">Template Method pattern realizes OCP </tspan><tspan
							x="4" dy="1.2em" class="st6">via inheritance. Implementation is shared </tspan><tspan x="4" dy="1.2em"
							class="st6">amongst </tspan>several concrete variants of an <tspan x="4" dy="1.2em" class="st6">algorithm, resulting in no change in the </tspan><tspan
							x="4" dy="1.2em" class="st6">core logic of the algorithm in case a new </tspan><tspan x="4" dy="1.2em"
							class="st6">variant is introduced. The downside of </tspan><tspan x="4" dy="1.2em" class="st6">inheritance, in case of the Template </tspan><tspan
							x="4" dy="1.2em" class="st6">method </tspan>pattern, is the additional form of <tspan x="4" dy="1.2em"
							class="st6">indirection towards the details of the </tspan><tspan x="4" dy="1.2em" class="st6">algorithm. This has negative impact on </tspan><tspan
							x="4" dy="1.2em" class="st6">debuggability and navigability of the </tspan><tspan x="4" dy="1.2em"
							class="st6">code. The Template design pattern should </tspan><tspan x="4" dy="1.2em" class="st6">be used in case of frequent change in the </tspan><tspan
							x="4" dy="1.2em" class="st6">algorithmic logic, code duplication exists </tspan><tspan x="4" dy="1.2em"
							class="st6">across certain algorithms or it is likely </tspan><tspan x="4" dy="1.2em" class="st6">that more variants of algorithm will be </tspan><tspan
							x="4" dy="1.2em" class="st6">introduced. In all other cases the pattern </tspan><tspan x="4" dy="1.2em"
							class="st6">only adds complexity and should be </tspan><tspan x="4" dy="1.2em" class="st6">avoided.</tspan></text>			</g>
			<g id="shape303-344" v:mID="303" v:groupContext="shape" transform="translate(165.791,2.27374E-13)">
				<title>Sheet.303</title>
				<v:userDefs>
					<v:ud v:nameU="ControlX" v:prompt="" v:val="VT0(0.94488188976378):24"/>
					<v:ud v:nameU="ControlY" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.23622047244094):24"/>
					<v:ud v:nameU="FillForegnd" v:prompt="" v:val="VT0(1):26"/>
					<v:ud v:nameU="ControlX" v:prompt="" v:val="VT0(2.3877952167477):1"/>
					<v:ud v:nameU="ControlY" v:prompt="" v:val="VT0(0.16705524393927):1"/>
					<v:ud v:nameU="XFoldLength" v:prompt="" v:val="VT0(0.18749833825511):1"/>
					<v:ud v:nameU="YFoldLength" v:prompt="" v:val="VT0(0.11488852803029):1"/>
					<v:ud v:nameU="FillForegnd" v:prompt="" v:val="VT5(#fec000)"/>
				</v:userDefs>
				<path d="M0 1347.59 L13.5 1339.32 L6.13 1335.56 L0 1347.59 Z" class="st16"/>
			</g>
		</g>
		<g id="shape304-347" v:mID="304" v:groupContext="shape" v:layerMember="0" transform="translate(218.268,-1191.36)">
			<title>Dynamic connector.304</title>
			<desc>I.e.</desc>
			<v:textBlock v:margins="rect(4,4,4,4)" v:tabSpace="42.5197"/>
			<v:textRect cx="-17.0079" cy="1340.5" width="40" height="17.6036"/>
			<path d="M0 1340.5 L-26.42 1340.5" class="st18"/>
			<rect v:rectContext="textBkgnd" x="-22.0255" y="1335.7" width="10.0352" height="9.59985" class="st20"/>
			<text x="-22.03" y="1342.9" class="st21" v:langID="1033"><v:paragraph v:horizAlign="1"/><v:tabList/>I.e.</text>		</g>
	</g>
</svg>
